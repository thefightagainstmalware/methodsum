import org.gradle.internal.jvm.Jvm

plugins {
    id 'java'
    id 'application'
    id 'cpp'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.ow2.asm:asm:9.3'
    implementation 'org.ow2.asm:asm-util:9.3'
    implementation 'org.ow2.asm:asm-commons:9.3'
    implementation 'org.ow2.asm:asm-tree:9.3'
    implementation 'org.ow2.asm:asm-analysis:9.3'
    testImplementation 'junit:junit:4.13.2'

}

sourceCompatibility = 1.8
targetCompatibility = 1.8

application {
    applicationDefaultJvmArgs = ["-Djava.library.path=" + file("${buildDir}/libs/divide/shared").absolutePath]
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

application {
    applicationDefaultJvmArgs = ["-Djava.library.path=" + file("${buildDir}/libs/divide/shared").absolutePath]
}

model {
    platforms {
        x64 {
            architecture "x86_64"
        }
    }

    components {
        modulus(NativeLibrarySpec) {
            targetPlatform "x64"
            binaries.all {
                def jvmHome = Jvm.current().javaHome
                if (targetPlatform.operatingSystem.macOsX) {
                    cppCompiler.args '-I', "${jvmHome}/include"
                    cppCompiler.args '-I', "${jvmHome}/include/darwin"
                    cppCompiler.args '-mmacosx-version-min=10.4'
                    linker.args '-mmacosx-version-min=10.4'
                } else if (targetPlatform.operatingSystem.linux) {
                    cppCompiler.args '-I', "${jvmHome}/include"
                    cppCompiler.args '-I', "${jvmHome}/include/linux"
                    cppCompiler.args '-D_FILE_OFFSET_BITS=64'
                } else if (targetPlatform.operatingSystem.windows) {
                    cppCompiler.args "-I${jvmHome}/include"
                    cppCompiler.args "-I${jvmHome}/include/win32"
                } else if (targetPlatform.operatingSystem.freeBSD) {
                    cppCompiler.args '-I', "${jvmHome}/include"
                    cppCompiler.args '-I', "${jvmHome}/include/freebsd"
                }
            }
        }
    }
}

jar {
    baseName("methodsum4j")
    from("build/libs/modulus/shared/" + System.mapLibraryName("modulus")) {
        into("native/" + System.getProperty("os.arch") + "/" + System.getProperty("os.name"))

    }
    manifest {
        attributes(
                "Main-Class": "gq.malwarefight.methodhash.Main"
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
        exclude "module-info.class"
    }
}
classes.dependsOn 'modulusSharedLibrary'