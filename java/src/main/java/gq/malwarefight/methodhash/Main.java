package gq.malwarefight.methodhash;

import org.objectweb.asm.ClassReader;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.MethodNode;

import java.io.*;
import java.nio.file.Files;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) throws Exception {
        ClassReader reader1 = new ClassReader(Files.newInputStream(new File("Rat.class").toPath())); // dreamys sample 1
        ClassReader reader2 = new ClassReader(Files.newInputStream(new File("SkyblockExtras.class").toPath())); // dreamys sample 2
        ClassNode node = new ClassNode();
        reader1.accept(node, ClassReader.SKIP_FRAMES);
        ClassNode node2 = new ClassNode();
        reader2.accept(node2, ClassReader.SKIP_FRAMES);
        MethodNode methodNode1 = node.methods.stream().filter(
                methodNode -> methodNode.desc.equals("(Lnet/minecraftforge/fml/common/event/FMLPreInitializationEvent;)V")
        ).findFirst().orElseThrow(AssertionError::new);
        MethodNode methodNode2 = node2.methods.stream().filter(
                methodNode -> methodNode.desc.equals("(Lnet/minecraftforge/fml/common/event/FMLPreInitializationEvent;)V")
        ).findFirst().orElseThrow(AssertionError::new);
        MethodSum.getHashFunction(); //activate static init
        doStuff(methodNode1, methodNode2);
    }
    public static void doStuff(MethodNode methodNode1, MethodNode methodNode2) {
        long time = System.nanoTime();
        MethodSum sum1 = new MethodSum(methodNode1);
        sum1.getHash();
        System.out.println("time: " + ((System.nanoTime() - time) / 1000000.0) + " ms");
        System.out.println(sum1.getHash());

        time = System.nanoTime();
        MethodSum sum2 = new MethodSum(methodNode2);
        sum2.getHash();
        System.out.println("time: " + ((System.nanoTime() - time) / 1000000.0) + " ms");
        System.out.println(sum2.getHash());

        time = System.nanoTime();
        int diff = MethodSum.compareHash(sum1.getHash(), sum2.getHash());
        System.out.println("time: " + ((System.nanoTime() - time) / 1000000.0) + " ms");
        System.out.println(diff);
    }
}
