package gq.malwarefight.methodhash;

import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.MethodNode;

import java.io.File;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;

public class MethodSum {
    private Integer blockSize;
    private String result;
    private final MethodNode node;
    static boolean usingFastMod;

    public MethodSum(MethodNode node) {
        this.blockSize = RollingHash.minBlockSize * (2 << binlog(Integer.divideUnsigned(node.instructions.size(), RollingHash.spamSumLength * RollingHash.minBlockSize)));
        this.node = node;
    }

    public String getHash() {
        if (result != null) {
            return result;
        }
        StringBuilder sig1 = new StringBuilder();
        StringBuilder sig2 = new StringBuilder();
        RollingHash rollingHash;
        do {
            rollingHash = new RollingHash();
            FNVHash h1 = getHashFunction();
            FNVHash h2 = getHashFunction();
            for (AbstractInsnNode insnNode: node.instructions.toArray()) {
                byte d = (byte) insnNode.getOpcode();
                rollingHash.update(d);
                h1.update(d);
                h2.update(d);
                if (unsignedLongModulus(rollingHash.hash, this.blockSize) == this.blockSize - 1) {
                    sig1.append(byteToBase64((int) unsignedLongModulus(h1.hash, 64)));
                    h1 = getHashFunction();
                }
                if (unsignedLongModulus(rollingHash.hash, (this.blockSize * 2)) == (this.blockSize * 2) - 1) {
                    sig2.append(byteToBase64((int) unsignedLongModulus(h2.hash, 64)));
                    h2 = getHashFunction();
                }
            }
            if (this.blockSize % 2 != 0) {
                throw new RuntimeException("block size too small " + this.blockSize);
            }
            this.blockSize /= 2;
        } while(sig1.length() < RollingHash.spamSumLength / 2);
        return (this.result = this.blockSize * 2 + ":" + sig1 + ":" + sig2);
    }

    public static FNVHash getHashFunction() {
        return new FNVHash();
    }
    public static char byteToBase64(int b) {
        return new char[] {
            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
                    'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
                    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
                    'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
                    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/'
        }[b];
    }
    public static int binlog(int bits) {
        int log = 0;
        if( ( bits & 0xffff0000 ) != 0 ) { bits >>>= 16; log = 16; }
        if( bits >= 256 ) { bits >>>= 8; log += 8; }
        if( bits >= 16  ) { bits >>>= 4; log += 4; }
        if( bits >= 4   ) { bits >>>= 2; log += 2; }
        return log + ( bits >>> 1 );
    }

    public static long unsignedLongModulus(long a, long b) {
        if (a >= 0 && b >= 0) {
            return a % b;
        }
        if (usingFastMod) {
            return unsignedLongMod(a, b);
        } else {
            return Long.remainderUnsigned(a, b);
        }
    }
    public static native long unsignedLongMod(long a, long b);

    private static int wagnerFisher(String h1, String h2) {
        int dist = new WagnerFisher(h1, h2).getDistance();
        dist = 100 - ((dist * RollingHash.spamSumLength * 100) / (h1.length() + h2.length()));
        return Math.max(0, dist);
    }
    public static int compareHash(String h1, String h2) {
        String[] parts1 = h1.split(":");
        String[] parts2 = h2.split(":");
        int blockSize1 = Integer.parseInt(parts1[0]);
        int blockSize2 = Integer.parseInt(parts2[0]);
        if (blockSize1 == blockSize2) {
            return Math.max(wagnerFisher(parts1[1], parts2[1]), wagnerFisher(parts1[2], parts2[2]));
        } else if (blockSize1 == 2 * blockSize2) {
            return wagnerFisher(parts1[1], parts2[2]);
        } else if (blockSize1 * 2 == blockSize2) {
            return wagnerFisher(parts1[2], parts2[1]);
        } else {
            return 0;
        }
    }

    static {
        long time = System.nanoTime();
        try {
            System.loadLibrary("modulus"); // development
            usingFastMod = true;
        } catch (UnsatisfiedLinkError e) {
            try {
                File file = new File(System.getProperty("java.io.tmpdir"), "modulusLib" + System.nanoTime());
                file.mkdir();
                file.deleteOnExit();
                String fileName = System.mapLibraryName("modulus");
                Path sharedLib = Paths.get(file.toString(), fileName);
                try (InputStream is = MethodSum.class.getResourceAsStream("/native/" + System.getProperty("os.arch") + "/" + System.getProperty("os.name") + "/" + fileName)) {
                    Files.copy(is, sharedLib, StandardCopyOption.REPLACE_EXISTING);
                }
                System.load(sharedLib.toAbsolutePath().toString());
                usingFastMod = true;
            } catch (Exception ex) {
                usingFastMod = false;
            }
        }
        System.out.println("Native library initialized in " + ((System.nanoTime() - time) / 1000000.0) + " ms");
        System.out.println("We are " + ((usingFastMod) ? "" : "not ") + "using fast modulus");
    }
}

class FNVHash {
    public static final long startHash = Long.parseUnsignedLong("14695981039346656037");
    public static final long prime = Long.parseUnsignedLong("1099511628211");
    public long hash = startHash;

    public void update(byte b) {
        hash *= prime;
        hash ^= b;
    }
}
